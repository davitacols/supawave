import React, { useState, useEffect } from 'react';
import { Modal } from './ui/Modal';
import { Button } from './ui/Button';
import { Card, CardContent } from './ui/Card';
import { analyticsAPI, salesAPI } from '../utils/api';
import { ShareIcon, DocumentDuplicateIcon } from '@heroicons/react/24/outline';

const QuickReport = ({ isOpen, onClose }) => {
  const [reportData, setReportData] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isOpen) {
      generateReport();
    }
  }, [isOpen]);

  const generateReport = async () => {
    setLoading(true);
    try {
      const [metrics, analytics] = await Promise.all([
        analyticsAPI.getLiveMetrics(),
        salesAPI.getAnalytics()
      ]);

      const today = new Date().toLocaleDateString();
      setReportData({
        date: today,
        todaySales: metrics.data.today_sales,
        todayRevenue: metrics.data.avg_order_value * metrics.data.today_sales,
        monthlyRevenue: analytics.data.monthly_revenue,
        topProduct: analytics.data.top_products?.[0]?.product__name || 'N/A'
      });
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setLoading(false);
    }
  };

  const shareReport = () => {
    if (!reportData) return;
    
    const report = `ðŸ“Š Daily Report - ${reportData.date}\n\n` +
      `Today's Sales: ${reportData.todaySales} transactions\n` +
      `Today's Revenue: â‚¦${Math.round(reportData.todayRevenue).toLocaleString()}\n` +
      `Monthly Revenue: â‚¦${reportData.monthlyRevenue?.toLocaleString() || 0}\n` +
      `Top Product: ${reportData.topProduct}\n\n` +
      `Generated by SupaWave POS ðŸš€`;
    
    if (navigator.share) {
      navigator.share({
        title: 'Daily Business Report',
        text: report
      });
    } else {
      navigator.clipboard.writeText(report);
      alert('Report copied to clipboard!');
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Quick Business Report">
      {loading ? (
        <div className="text-center py-8">Generating report...</div>
      ) : reportData ? (
        <div className="space-y-4">
          <Card>
            <CardContent>
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center p-3 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">{reportData.todaySales}</div>
                  <div className="text-sm text-blue-500">Today's Sales</div>
                </div>
                <div className="text-center p-3 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    â‚¦{Math.round(reportData.todayRevenue).toLocaleString()}
                  </div>
                  <div className="text-sm text-green-500">Today's Revenue</div>
                </div>
              </div>
              
              <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                <div className="text-sm text-gray-600">
                  <strong>Monthly Revenue:</strong> â‚¦{reportData.monthlyRevenue?.toLocaleString() || 0}
                </div>
                <div className="text-sm text-gray-600">
                  <strong>Top Product:</strong> {reportData.topProduct}
                </div>
                <div className="text-sm text-gray-600">
                  <strong>Report Date:</strong> {reportData.date}
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="flex space-x-3">
            <Button onClick={shareReport} className="flex-1">
              <ShareIcon className="h-4 w-4 mr-2" />
              Share Report
            </Button>
            <Button variant="outline" onClick={onClose}>
              Close
            </Button>
          </div>
        </div>
      ) : (
        <div className="text-center py-8">Failed to generate report</div>
      )}
    </Modal>
  );
};

export default QuickReport;